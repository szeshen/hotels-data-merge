// Code generated by mockery v2.38.0. DO NOT EDIT.

package cache

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheInterface is an autogenerated mock type for the CacheInterface type
type MockCacheInterface struct {
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *MockCacheInterface) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value, d
func (_m *MockCacheInterface) Set(key string, value interface{}, d time.Duration) {
	_m.Called(key, value, d)
}

// NewMockCacheInterface creates a new instance of MockCacheInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheInterface {
	mock := &MockCacheInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
